// src/components/Minijuego.jsx
import { Container, Button, Form, Card, ListGroup } from "react-bootstrap";
import { loadStripe } from "@stripe/stripe-js";
import { useSearchParams } from "react-router-dom";
import { useEffect, useState } from "react";

// Lee la PK del entorno (por ejemplo VITE_STRIPE_PK o VITE_STRIPE_KEY)
const STRIPE_PK =
    import.meta.env.VITE_STRIPE_PK ?? import.meta.env.VITE_STRIPE_KEY ?? null;
// Solo crea la promesa si existe una PK vÃ¡lida
const stripePromise = STRIPE_PK ? loadStripe(STRIPE_PK) : null;

// LÃ­mite gratuito de preguntas
const FREE_LIMIT = 15;

// --------------------- Generador de versiÃ³n offline (ZIP) ---------------------
function getOfflineFiles({ categories }) {
    const title = "Juego para parejas - VersiÃ³n Offline";

    // SVG favicon/logo con colores del sitio y las iniciales "TG"
    const svgLogo = `
<svg xmlns="http://www.w3.org/2000/svg" width="128" height="128">
  <defs>
    <linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0%" stop-color="#7A3E71"/>
      <stop offset="100%" stop-color="#E76F51"/>
    </linearGradient>
  </defs>
  <rect rx="28" ry="28" width="128" height="128" fill="url(#g)"/>
  <text x="50%" y="56%" dominant-baseline="middle" text-anchor="middle"
        font-family="Inter, Segoe UI, Arial" font-size="56" font-weight="800"
        fill="#ffffff">TG</text>
</svg>`.trim();
    const faviconDataUrl = "data:image/svg+xml;utf8," + encodeURIComponent(svgLogo);

    const html = `<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#4B2946" />
  <title>${title}</title>
  <link rel="icon" href="${faviconDataUrl}" sizes="any" />
  <link rel="apple-touch-icon" href="${faviconDataUrl}" />
  <meta property="og:title" content="${title}" />
  <meta property="og:description" content="VersiÃ³n offline del juego de preguntas para parejas." />
  <meta property="og:image" content="${faviconDataUrl}" />
  <link rel="stylesheet" href="./style.css" />
</head>
<body>
  <main class="container">
    <img class="brand" src="${faviconDataUrl}" alt="Logo Teresa Galeano" />
    <h1>${title}</h1>
    <div class="card">
      <div class="row">
        <label for="category">CategorÃ­a</label>
        <select id="category" aria-label="Seleccionar categorÃ­a"></select>
      </div>
      <div class="row">
        <div id="counter" class="muted"></div>
      </div>
      <div class="question" id="question" aria-live="polite"></div>
      <textarea id="answer" rows="3" placeholder="EscribÃ­ tu respuesta aquÃ­..." aria-label="Respuesta"></textarea>
      <div class="actions">
        <button id="prev" type="button">Anterior</button>
        <button id="next" type="button">Siguiente</button>
        <button id="export" type="button">Exportar respuestas (.txt)</button>
      </div>
    </div>
    <p class="muted small">
      Funciona 100% offline. Tus respuestas quedan en este navegador (no se suben a ningÃºn lado).
      Consejo: usÃ¡ <strong>Ctrl/Cmd + Enter</strong> para avanzar.
    </p>
  </main>
  <script src="./game.js"></script>
</body>
</html>`.trim();

    // ðŸŽ¨ estilos con colores de la web
    const css = `
:root{
  --bg:#faf7f5;
  --card:#ffffff;
  --text:#2d2130;
  --muted:#6c5a6f;
  --primario-oscuro:#4B2946;
  --primario-claro:#7A3E71;
  --salmon:#E76F51;
  --br:14px;
}
*{box-sizing:border-box}
html,body{
  margin:0;padding:0;
  background:var(--bg);color:var(--text);
  font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif
}
.container{max-width:820px;margin:40px auto;padding:0 16px}
.brand{width:56px;height:56px;border-radius:14px;display:block;margin:0 0 12px}
h1{font-weight:800;letter-spacing:.2px;margin:0 0 20px;color:var(--primario-oscuro)}
.card{background:var(--card);border-radius:var(--br);padding:20px;box-shadow:0 10px 30px rgba(0,0,0,.07)}
.row{margin:10px 0}
label{display:block;font-weight:600;margin-bottom:6px;color:var(--primario-claro)}
select,textarea,button{font:inherit}
select,textarea{width:100%;padding:10px 12px;border:1px solid #e3dfe6;border-radius:10px;background:#fff}
textarea{resize:vertical}
.question{padding:12px 0;font-size:18px;font-weight:600;color:var(--primario-oscuro)}
.actions{display:flex;gap:10px;margin-top:12px;flex-wrap:wrap}
button{padding:10px 14px;border:none;border-radius:10px;background:var(--primario-claro);color:white;cursor:pointer;transition:.2s}
button#next{background:var(--salmon)}
button:hover{opacity:.92}
button:disabled{opacity:.6;cursor:not-allowed}
.muted{color:var(--muted)}
.small{font-size:12px}
`.trim();

    // JS offline: lÃ³gica completa + persistencia local
    const js = `
// ---- Datos del juego (desde tu web) ----
const CATEGORIES = ${JSON.stringify(categories, null, 2)};

// ---- Estado ----
let catIdx = 0;
let qIdx = 0;
let answers = CATEGORIES.map(() => []);

// Restaurar desde localStorage si existe
try {
  const saved = JSON.parse(localStorage.getItem('minijuego_answers') || 'null');
  const savedCat = Number(localStorage.getItem('minijuego_catIdx') || '0');
  const savedQ = Number(localStorage.getItem('minijuego_qIdx') || '0');
  if (Array.isArray(saved) && saved.length === CATEGORIES.length) {
    answers = saved;
    catIdx = isNaN(savedCat) ? 0 : savedCat;
    qIdx = isNaN(savedQ) ? 0 : savedQ;
  }
} catch(e){ /* ignore */ }

// ---- UI refs ----
const $cat = document.getElementById('category');
const $question = document.getElementById('question');
const $answer = document.getElementById('answer');
const $prev = document.getElementById('prev');
const $next = document.getElementById('next');
const $export = document.getElementById('export');
const $counter = document.getElementById('counter');

// Poblar categorÃ­as
CATEGORIES.forEach((c, i) => {
  const opt = document.createElement('option');
  opt.value = i; opt.textContent = c.name;
  $cat.appendChild(opt);
});

function persist(){
  try {
    localStorage.setItem('minijuego_answers', JSON.stringify(answers));
    localStorage.setItem('minijuego_catIdx', String(catIdx));
    localStorage.setItem('minijuego_qIdx', String(qIdx));
  } catch(e){ /* ignore */ }
}

function render(){
  $cat.value = String(catIdx);
  const cat = CATEGORIES[catIdx];
  const q = cat.questions[qIdx];
  $question.textContent = q;
  $answer.value = answers[catIdx][qIdx] ?? '';
  $counter.textContent = \`\${cat.name} (\${qIdx+1} / \${cat.questions.length})\`;
  $prev.disabled = (catIdx === 0 && qIdx === 0);
  $next.textContent = (catIdx === CATEGORIES.length-1 && qIdx === cat.questions.length-1) ? 'Finalizar' : 'Siguiente';
}

$cat.addEventListener('change', e => {
  catIdx = Number(e.target.value); qIdx = 0; persist(); render();
});

$prev.addEventListener('click', () => {
  if (qIdx > 0) { qIdx--; }
  else if (catIdx > 0) { catIdx--; qIdx = CATEGORIES[catIdx].questions.length - 1; }
  persist(); render();
});

$next.addEventListener('click', () => {
  const v = $answer.value.trim() || 'â€”sin respuestaâ€”';
  answers[catIdx][qIdx] = v;
  const cat = CATEGORIES[catIdx];
  if (qIdx + 1 < cat.questions.length) qIdx++;
  else if (catIdx + 1 < CATEGORIES.length) { catIdx++; qIdx = 0; }
  else alert('Â¡Juego completado! PodÃ©s exportar tus respuestas.');
  persist(); render();
});

$answer.addEventListener('input', () => {
  // guardado en vivo
  answers[catIdx][qIdx] = $answer.value;
  persist();
});

$answer.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
    e.preventDefault(); $next.click();
  }
});

// Exporta respuestas (.txt)
$export.addEventListener('click', () => {
  const lines = [];
  CATEGORIES.forEach((cat, i) => {
    lines.push('## ' + cat.name);
    cat.questions.forEach((q, j) => {
      const a = (answers[i] && answers[i][j]) ? answers[i][j] : '';
      lines.push(\`Q\${j+1}. \${q}\\nR: \${a}\\n\`);
    });
    lines.push('');
  });
  const blob = new Blob([lines.join('\\n')], { type: 'text/plain;charset=utf-8' });
  const a = document.createElement('a');
  a.href = URL.createObjectURL(blob);
  a.download = 'respuestas_minijuego.txt';
  a.click();
  URL.revokeObjectURL(a.href);
});

render();
`.trim();

    return { html, css, js };
}
// -----------------------------------------------------------------------------


// --------------------------- Datos del juego web ------------------------------
const categories = [
    {
        name: "Divertidas",
        questions: [
            "Â¿CuÃ¡l fue tu primera impresiÃ³n de mÃ­?",
            "Â¿CreÃ©s en el amor a primera vista?",
            "Â¿CuÃ¡l es tu pelÃ­cula favorita?",
            "Â¿CuÃ¡l es tu canciÃ³n de karaoke favorita?",
            "Â¿QuÃ© tipo de comida te gusta?",
            "Â¿CreÃ©s en los fantasmas?",
            "Â¿CuÃ¡l es tu color favorito?",
            "Â¿CuÃ¡l es tu libro favorito?",
            "Â¿Por quÃ© terminÃ³ tu Ãºltima relaciÃ³n?",
            "Â¿QuÃ© es algo que realmente te asusta?",
            "Â¿QuÃ© relaciÃ³n tenÃ©s con tu ex?",
            "Â¿CuÃ¡les son las tareas del hogar que menos te gusta hacer?",
            "Â¿CÃ³mo es un dÃ­a perfecto para vos?",
            "Â¿QuÃ© haces cuando te sentÃ­s estresado?",
            "Â¿CuÃ¡l es tu comida favorita para compartir en una cita nocturna?",
        ],
    },
    {
        name: "Pasado",
        questions: [
            "Â¿QuiÃ©n fue tu primer amor y cÃ³mo era?",
            "Â¿Alguna vez te han engaÃ±ado?",
            "Â¿Alguna vez has engaÃ±ado a alguien?",
            "Â¿Sigues en contacto con algÃºn amigo de la infancia?",
            "Â¿Tuviste una experiencia positiva en la escuela secundaria?",
            "Â¿CuÃ¡l fue el primer Ã¡lbum que tuviste?",
            "Â¿Alguna vez has ganado un premio deportivo?",
            "Â¿QuÃ© sientes por tus ex?",
            "Â¿QuÃ© ha sido lo mÃ¡s atrevido que has hecho hasta ahora?",
            "Â¿Puedes describir cÃ³mo fue tu primer desamor?",
            "Â¿QuÃ© es algo que solÃ­as creer sobre las relaciones pero que ya no crees?",
            "Â¿Eras 'popular' en la escuela secundaria?",
            "Â¿QuÃ© es lo peor que te ha pasado?",
            "Â¿QuÃ© es lo que mÃ¡s extraÃ±as de la infancia?",
            "Â¿CuÃ¡l es tu mayor arrepentimiento en la vida hasta ahora?",
        ],
    },
    {
        name: "Futuro",
        questions: [
            "Â¿Es importante para vos formar una familia?",
            "Â¿CÃ³mo ves nuestro futuro como pareja, tanto por separado como colectivamente?",
            "En cinco a diez aÃ±os, Â¿dÃ³nde te ves?",
            "Â¿CÃ³mo te gustarÃ­a que sea nuestra futura casa?",
            "Â¿CÃ³mo te sentÃ­s acerca de tener hijos?",
            "Â¿QuerÃ©s ser dueÃ±o de una casa algÃºn dÃ­a?",
            "Â¿Hay algÃºn lugar que te guste y que te gustarÃ­a mostrarme algÃºn dÃ­a?",
            "Â¿Alguna vez te mudarÃ­as para adaptarte a tu trabajo?",
            "Â¿QuÃ© hay de nosotros que creÃ©s que funciona bien juntos? Â¿CÃ³mo nos equilibramos unos a otros?",
            "Â¿Hay algo que has soÃ±ado hacer durante mucho tiempo? Â¿Por quÃ© no lo has hecho?",
            "Â¿CuÃ¡les son tus metas en la relaciÃ³n?",
            "Â¿TenÃ©s algÃºn hÃ¡bito que quieras cambiar?",
            "Â¿DÃ³nde te ves viviendo cuando te jubiles?",
            "Â¿CuÃ¡les son sus prioridades y metas financieras?",
            "Â¿TenÃ©s una corazonada secreta sobre cÃ³mo morirÃ¡s?",
        ],
    },
    {
        name: "Valores",
        questions: [
            "Cuando tenÃ©s un mal dÃ­a, Â¿quÃ© te hace sentir mejor?",
            "Â¿CuÃ¡les son algunas de las cosas de mayor valor en su lista de deseos?",
            "Si pudieras adquirir una cualidad o habilidad, Â¿cuÃ¡l serÃ­a?",
            "Â¿CuÃ¡l creÃ©s que es tu mayor fortaleza en esta relaciÃ³n?",
            "Â¿QuÃ© es algo de tu vida que nunca cambiarÃ­as por otra persona, incluyÃ©ndome a mÃ­?",
            "Â¿CuÃ¡l es el lugar al que siempre has querido viajar?",
            "Â¿Sueles seguir tu cabeza o tu corazÃ³n cuando tomas decisiones?",
            "Si pudieras escribir una nota a tu yo mÃ¡s joven, Â¿quÃ© le dirÃ­as en solo cinco palabras?",
            "Â¿QuÃ© es lo Ãºnico que te hace sentir vivo?",
            "Â¿Crees que todo sucede por una razÃ³n, o simplemente encontramos razones despuÃ©s de que suceden las cosas?",
            "Â¿QuÃ© es para vos una relaciÃ³n sana?",
            "Â¿QuÃ© esperÃ¡s aprender el prÃ³ximo aÃ±o?",
            "Si pudieras cambiar algo sobre la forma en que te criaron, Â¿cuÃ¡l serÃ­a?",
            "Si pudieras cambiar de vida con cualquiera, Â¿a quiÃ©n elegirÃ­as? Â¿Y por quÃ©?",
            "Â¿CuÃ¡l creÃ©s que fue tu momento mÃ¡s vulnerable en nuestra relaciÃ³n?",
        ],
    },
    {
        name: "Intimidad",
        questions: [
            "Â¿CÃ³mo y quÃ© aprendiste sobre el sexo mientras crecÃ­as?",
            "Â¿DÃ³nde te gusta y no te gusta que te toquen?",
            "Â¿CÃ³mo te sientes al ver porno?",
            "Â¿CuÃ¡l es tu mayor fantasÃ­a?",
            "Â¿Prefieres rapiditos o maratones?",
            "Â¿CuÃ¡l es tu parte favorita de mi cuerpo?",
            "Â¿EstÃ¡s satisfecho con nuestra quÃ­mica e intimidad?",
            "Â¿QuÃ© aprendiste sobre tu cuerpo en el Ãºltimo aÃ±o que podrÃ­a hacer tu vida sexual mÃ¡s divertida?",
            "Â¿En quÃ© contexto te sientes mÃ¡s sexy?",
            "Â¿QuÃ© es lo que nunca has hecho y te gustarÃ­a probar?",
            "Â¿CuÃ¡ntas veces a la semana te gustarÃ­a tener sexo?",
            "Â¿QuÃ© es lo mejor de nuestra vida sexual?",
            "Â¿Prefieres hacer el amor con las luces encendidas o en la oscuridad?",
            "Como pareja, Â¿cuÃ¡les son nuestras fortalezas y debilidades sexuales?",
            "Â¿CÃ³mo ves nuestra vida sexual cambiando a travÃ©s de los aÃ±os?",
        ],
    },
];
// -----------------------------------------------------------------------------


export default function Minijuego() {
    const [searchParams] = useSearchParams();
    const [isPaid, setIsPaid] = useState(false);
    const [catIdx, setCatIdx] = useState(0);
    const [qIdx, setQIdx] = useState(0);
    const [answers, setAnswers] = useState(categories.map(() => []));
    const [input, setInput] = useState("");
    const [finished, setFinished] = useState(false);
    const [payError, setPayError] = useState("");

    // Detecta pago exitoso via ?paid=true
    useEffect(() => {
        if (searchParams.get("paid") === "true") {
            setIsPaid(true);
        }
    }, [searchParams]);

    // Total de preguntas respondidas
    const totalAnswered = answers.reduce((sum, arr) => sum + arr.length, 0);

    const handleNext = () => {
        // Bloquea mÃ¡s allÃ¡ del lÃ­mite si no pagÃ³
        if (totalAnswered >= FREE_LIMIT && !isPaid) return;

        const updated = answers.map((arr) => [...arr]);
        updated[catIdx].push(input.trim() || "â€”sin respuestaâ€”");
        setAnswers(updated);
        setInput("");

        // Avanza pregunta o categorÃ­a
        if (qIdx + 1 < categories[catIdx].questions.length) {
            setQIdx(qIdx + 1);
        } else if (catIdx + 1 < categories.length) {
            setCatIdx(catIdx + 1);
            setQIdx(0);
        } else {
            setFinished(true);
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === "Enter") {
            e.preventDefault();
            handleNext();
        }
    };

    // Inicia Stripe Checkout (protegido si no hay PK ni backend)
    const handleSubscribe = async () => {
        setPayError("");
        if (!stripePromise) {
            setPayError(
                "Pagos deshabilitados en desarrollo: falta VITE_STRIPE_PK/VITE_STRIPE_KEY."
            );
            return;
        }
        try {
            const stripe = await stripePromise;
            const res = await fetch("/api/create-checkout-session", { method: "POST" });
            if (!res.ok) throw new Error("No se pudo crear la sesiÃ³n de pago.");
            const { id } = await res.json();
            const { error } = await stripe.redirectToCheckout({ sessionId: id });
            if (error) throw error;
        } catch (err) {
            setPayError(
                err?.message ?? "OcurriÃ³ un problema iniciando el pago. Intenta de nuevo mÃ¡s tarde."
            );
        }
    };

    // ----------------------- Descarga tras pago (ZIP offline) -------------------
    if (isPaid && totalAnswered >= FREE_LIMIT) {
        const handleDownloadOffline = async () => {
            const [{ default: JSZip }, { saveAs }] = await Promise.all([
                import("jszip"),
                import("file-saver"),
            ]);

            const zip = new JSZip();
            const { html, css, js } = getOfflineFiles({ categories });

            zip.file("index.html", html);
            zip.file("style.css", css);
            zip.file("game.js", js);

            const blob = await zip.generateAsync({ type: "blob" });
            saveAs(blob, "Minijuego_Offline.zip");
        };

        return (
            <Container className="mt-5 text-center">
                <h2>Â¡Gracias por suscribirte!</h2>
                <p>DescargÃ¡ la versiÃ³n <strong>offline</strong> del minijuego (funciona sin internet):</p>
                <Button variant="salmon" onClick={handleDownloadOffline}>
                    Descargar Minijuego Offline (.zip)
                </Button>
                <p className="mt-3 text-muted">
                    Incluye <code>index.html</code>, <code>style.css</code> y <code>game.js</code>.
                    AbrÃ­ <strong>index.html</strong> y jugÃ¡ sin conexiÃ³n.
                </p>
            </Container>
        );
    }
    // ---------------------------------------------------------------------------

    // Paywall antes de terminar si no pagÃ³
    if (!finished && totalAnswered >= FREE_LIMIT && !isPaid) {
        return (
            <Container className="mt-5 text-center">
                <h2>Â¡Has alcanzado el lÃ­mite de preguntas gratuitas!</h2>
                <p>Realiza el pago para continuar con todo el juego completo.</p>

                <Button variant="primary" onClick={handleSubscribe}>
                    Comprar GS 30.000
                </Button>

                {!stripePromise && (
                    <p className="mt-3 text-warning">
                        (Modo dev) Stripe no estÃ¡ configurado: agregÃ¡ <code>VITE_STRIPE_PK</code> o <code>VITE_STRIPE_KEY</code>.
                    </p>
                )}
                {payError && <p className="mt-2 text-danger">{payError}</p>}
            </Container>
        );
    }

    // Vista final al terminar todas las preguntas
    if (finished) {
        return (
            <Container className="mt-5">
                <h1>Â¡Juego completado!</h1>
                {categories.map((cat, i) => (
                    <Card className="mb-4" key={i}>
                        <Card.Header as="h5">{cat.name}</Card.Header>
                        <ListGroup variant="flush">
                            {answers[i].map((resp, j) => (
                                <ListGroup.Item key={j}>
                                    <strong>Q{j + 1}:</strong> {cat.questions[j]}
                                    <br />
                                    <em>R:</em> {resp}
                                </ListGroup.Item>
                            ))}
                        </ListGroup>
                    </Card>
                ))}
            </Container>
        );
    }

    // Vista de pregunta activa
    const cat = categories[catIdx];
    const question = cat.questions[qIdx];

    return (
        <Container className="mt-5">
            <h2>
                {cat.name}{" "}
                <span style={{ color: "var(--primario-claro)" }}>
          ({qIdx + 1} / {cat.questions.length})
        </span>
            </h2>
            <Card className="p-3 mb-3">
                <Card.Text>{question}</Card.Text>
                <Form.Control
                    as="textarea"
                    rows={2}
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="EscribÃ­ tu respuesta aquÃ­..."
                />
            </Card>
            <Button variant="salmon" onClick={handleNext} className="me-3">
                {catIdx === categories.length - 1 &&
                qIdx === categories[catIdx].questions.length - 1
                    ? "Finalizar"
                    : "Siguiente"}
            </Button>
            <p className="mt-3 text-muted">
                Preguntas gratuitas restantes: {Math.max(FREE_LIMIT - totalAnswered, 0)}
            </p>
        </Container>
    );
}
